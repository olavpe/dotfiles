#+TITLE: Spacemacs Tangled User Configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Spacemacs Layers
Configuration Layers declaration. You should not put any user code in this
function besides modifying the variable values. 
** Function start and default settings
   
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (defun dotspacemacs/layers ()
     (setq-default
      ;; Base distribution to use. This is a layer contained in the directory
      ;; `+distribution'. For now available distributions are `spacemacs-base'
      ;; or `spacemacs'. (default 'spacemacs)
      dotspacemacs-distribution 'spacemacs
      ;; Lazy installation of layers (i.e. layers are installed only when a file
      ;; with a supported type is opened). Possible values are `all', `unused'
      ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
      ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
      ;; lazy install any layer that support lazy installation even the layers
      ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
      ;; installation feature and you have to explicitly list a layer in the
      ;; variable `dotspacemacs-configuration-layers' to install it.
      ;; (default 'unused)
      ;; dotspacemacs-enable-lazy-installation 'all
      dotspacemacs-enable-lazy-installation 'unused
      ;; If non-nil then Spacemacs will ask for confirmation before installing
      ;; a layer lazily. (default t)
      dotspacemacs-ask-for-lazy-installation t
      ;; If non-nil layers with lazy install support are lazy installed.
      ;; List of additional paths where to look for configuration layers.
      ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
      dotspacemacs-configuration-layer-path '()
      ;; List of configuration layers to load.
 #+END_SRC
 
** Layer Declaration

   Declarations of layers which spacemacs should install. When layers are called
   there are different options for how this should be done

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    dotspacemacs-configuration-layers
    '(csv
      bm
      bibtex
      javascript
      yaml
      octave
      helm
      auto-completion
      (c-c++ :variables
             c-c++-enable-clang-support t)
      better-defaults
      conda
      (conda :variables
             conda-anaconda-home "/home/olav/.conda/envs")
      emacs-lisp
      ess
      ;; +lang
      ;; (extra-langs :variables matlab-mode)
      git
      markdown
      (latex :variables
             latex-build-command "LaTeX"
             latex-enable-auto-fill t
             latex-enable-folding t
             latex-enable-magic t)
      pandoc
      python
      pdf
      ;; (python :variables python-backend 'lsp)
      ;; ipython-notebook
      (org :variables
          org-enable-roam-support t)
      (shell :variables
             shell-default-shell 'shell
             shell-default-height 30
             shell-default-position 'bottom)
      (spacemacs-spaceline :location local)
      spell-checking
      syntax-checking
      ;; version-control
      )
 #+END_SRC

** Additional packages to install
   
List of additional packages that will be installed without being wrapped in a
layer. If you need some configuration for these packages, then consider creating
a layer. You can also put the configuration in `dotspacemacs/user-config'.

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   dotspacemacs-additional-packages '(
                                      ein
                                      jupyter
                                      xresources-theme
                                      ;; org-bullets
                                      ;; (org-roam :location (recipe :fetcher github :repo "jethrokuan/org-roam"))
                                      org-pdftools
                                      org-noter-pdftools
                                      org-roam-bibtex
                                      org-roam-server
                                      ;; ewal
                                      ewal-spacemacs-themes
                                      ewal-evil-cursors
                                      autopair
                                      matlab-mode
                                      yasnippet-classic-snippets
                                      yasnippet-snippets
                                      )
 #+END_SRC

** Extra package options 
  - "Frozen Packages" is list of packages that you do not want to be updated
  - "Excluded Packages" is list of packages that will not be installed or loaded
  - 'Install packages': Defines the behaviour of Spacemacs when installing packages.
    - 'used-only': installs only explicitly used packages and uninstall any
      unused packages as well as their unused dependencies.   
    - `used-but-keep-unused': installs only the used packages but won't
      uninstall them if they become unused.
    - `all' installs *all* packages supported by Spacemacs and never uninstall
      them. (default is `used-only')  
 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      dotspacemacs-frozen-packages '()
      dotspacemacs-excluded-packages '()
      dotspacemacs-install-packages 'used-only))
 #+END_SRC
 
* Spacemacs Init 
** Start and several functions
Initialization function. This function is called at the very startup of
Spacemacs initialization before layers configuration. You should not put any
user code in there besides modifying the variable values. 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (defun dotspacemacs/init ()
     ;; This setq-default sexp is an exhaustive list of all the supported
     ;; spacemacs settings.
     (setq-default
      ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
      ;; possible. Set it to nil if you have no way to use HTTPS in your
      ;; environment, otherwise it is strongly recommended to let it set to t.
      ;; This variable has no effect if Emacs is launched with the parameter
      ;; `--insecure' which forces the value of this variable to nil.
      ;; (default t)
      ;; dotspacemacs-elpa-https t
      dotspacemacs-elpa-https t
      ;; Maximum allowed time in seconds to contact an ELPA repository.
      dotspacemacs-elpa-timeout 5
      ;; If non nil then spacemacs will check for updates at startup
      ;; when the current branch is not `develop'. Note that checking for
      ;; new versions works via git commands, thus it calls GitHub services
      ;; whenever you start Emacs. (default nil)

      ;; If non-nil then Spacelpa repository is the primary source to install
      ;; a locked version of packages. If nil then Spacemacs will install the
      ;; latest version of packages from MELPA. (default nil)
      dotspacemacs-use-spacelpa t

      ;; If non-nil then verify the signature for downloaded Spacelpa archives.
      ;; (default t)
      dotspacemacs-verify-spacelpa-archives t

      dotspacemacs-check-for-update nil
      ;; If non-nil, a form that evaluates to a package directory. For example, to
      ;; use different package directories for different Emacs versions, set this
      ;; to `emacs-version'.
      dotspacemacs-elpa-subdirectory nil
      ;; One of `vim', `emacs' or `hybrid'.
      ;; `hybrid' is like `vim' except that `insert state' is replaced by the
      ;; `hybrid state' with `emacs' key bindings. The value can also be a list
      ;; with `:variables' keyword (similar to layers). Check the editing styles
      ;; section of the documentation for details on available variables.
      ;; (default 'vim)
      dotspacemacs-editing-style 'vim
      ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
      dotspacemacs-verbose-loading nil
      ;; Specify the startup banner. Default value is `official', it displays
      ;; the official spacemacs logo. An integer value is the index of text
      ;; banner, `random' chooses a random text banner in `core/banners'
      ;; directory. A string value must be a path to an image format supported
      ;; by your Emacs build.
      ;; If the value is nil then no banner is displayed. (default 'official)
      dotspacemacs-startup-banner 'official
      ;; List of items to show in startup buffer or an association list of
      ;; the form `(list-type . list-size)`. If nil then it is disabled.
      ;; Possible values for list-type are:
      ;; `recents' `bookmarks' `projects' `agenda' `todos'."
      ;; List sizes may be nil, in which case
      ;; `spacemacs-buffer-startup-lists-length' takes effect.
      dotspacemacs-startup-lists '((recents . 5)
                                   (projects . 7))
      ;; True if the home buffer should respond to resize events.
      dotspacemacs-startup-buffer-responsive t
      ;; Default major mode of the scratch buffer (default `text-mode')
      dotspacemacs-scratch-mode 'text-mode
 #+END_SRC

** Declaring the Theme
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      dotspacemacs-themes '(
                            ;; xresources
                            ewal-spacemacs-modern
                            ;; spacemacs-dark
                            ;;spacemacs-light
                            )
 #+END_SRC
 
** Rest of the function

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   ;; If non nil the cursor color matches the state color in GUI Emacs.
   dotspacemacs-colorize-cursor-according-to-state t
   ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
   ;; quickly tweak the mode-line size to make separators look not too crappy.
   dotspacemacs-default-font '("Source Code Pro"
                               :size 18
                               :weight normal
                               :width normal
                               :powerline-scale 2)
   ;; The leader key
   dotspacemacs-leader-key "SPC"
   ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
   ;; (default "SPC")
   dotspacemacs-emacs-command-key "SPC"
   ;; The key used for Vim Ex commands (default ":")
   dotspacemacs-ex-command-key ":"
   ;; The leader key accessible in `emacs state' and `insert state'
   ;; (default "M-m")
   dotspacemacs-emacs-leader-key "M-m"
   ;; Major mode leader key is a shortcut key which is the equivalent of
   ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
   dotspacemacs-major-mode-leader-key ","
   ;; Major mode leader key accessible in `emacs state' and `insert state'.
   ;; (default "C-M-m")
   dotspacemacs-major-mode-emacs-leader-key "C-M-m"
   ;; These variables control whether separate commands are bound in the GUI to
   ;; the key pairs C-i, TAB and C-m, RET.
   ;; Setting it to a non-nil value, allows for separate commands under <C-i>
   ;; and TAB or <C-m> and RET.
   ;; In the terminal, these pairs are generally indistinguishable, so this only
   ;; works in the GUI. (default nil)
   dotspacemacs-distinguish-gui-tab nil
   ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
   dotspacemacs-remap-Y-to-y$ nil
   ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
   ;; there. (default t)
   dotspacemacs-retain-visual-state-on-shift t
   ;; If non-nil, J and K move lines up and down when in visual mode.
   ;; (default nil)
   dotspacemacs-visual-line-move-text nil
   ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
   ;; (default nil)
   dotspacemacs-ex-substitute-global nil
   ;; Name of the default layout (default "Default")
   dotspacemacs-default-layout-name "Default"
   ;; If non nil the default layout name is displayed in the mode-line.
   ;; (default nil)
   dotspacemacs-display-default-layout nil
   ;; If non nil then the last auto saved layouts are resume automatically upon
   ;; start. (default nil)
   dotspacemacs-auto-resume-layouts t
   ;; Size (in MB) above which spacemacs will prompt to open the large file
   ;; literally to avoid performance issues. Opening a file literally means that
   ;; no major mode or minor modes are active. (default is 1)
   dotspacemacs-large-file-size 1
   ;; Location where to auto-save files. Possible values are `original' to
   ;; auto-save the file in-place, `cache' to auto-save the file to another
   ;; file stored in the cache directory and `nil' to disable auto-saving.
   ;; (default 'cache)
   dotspacemacs-auto-save-file-location 'cache
   ;; Maximum number of rollback slots to keep in the cache. (default 5)
   dotspacemacs-max-rollback-slots 5
   ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
   dotspacemacs-helm-resize nil
   ;; if non nil, the helm header is hidden when there is only one source.
   ;; (default nil)
   dotspacemacs-helm-no-header nil
   ;; define the position to display `helm', options are `bottom', `top',
   ;; `left', or `right'. (default 'bottom)
   dotspacemacs-helm-position 'bottom
   ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
   ;; in all non-asynchronous sources. If set to `source', preserve individual
   ;; source settings. Else, disable fuzzy matching in all sources.
   ;; (default 'always)
   dotspacemacs-helm-use-fuzzy 'always
   ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
   ;; several times cycle between the kill ring content. (default nil)
   dotspacemacs-enable-paste-transient-state nil
   ;; Which-key delay in seconds. The which-key buffer is the popup listing
   ;; the commands bound to the current keystroke sequence. (default 0.4)
   dotspacemacs-which-key-delay 0.4
   ;; Which-key frame position. Possible values are `right', `bottom' and
   ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
   ;; right; if there is insufficient space it displays it at the bottom.
   ;; (default 'bottom)
   dotspacemacs-which-key-position 'bottom
   ;; If non nil a progress bar is displayed when spacemacs is loading. This
   ;; may increase the boot time on some systems and emacs builds, set it to
   ;; nil to boost the loading time. (default t)
   dotspacemacs-loading-progress-bar t
   ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
   ;; (Emacs 24.4+ only)
   dotspacemacs-fullscreen-at-startup nil
   ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
   ;; Use to disable fullscreen animations in OSX. (default nil)
   dotspacemacs-fullscreen-use-non-native nil
   ;; If non nil the frame is maximized when Emacs starts up.
   ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
   ;; (default nil) (Emacs 24.4+ only)
   dotspacemacs-maximized-at-startup nil
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's active or selected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-active-transparency 90
   ;; A value from the range (0..100), in increasing opacity, which describes
   ;; the transparency level of a frame when it's inactive or deselected.
   ;; Transparency can be toggled through `toggle-transparency'. (default 90)
   dotspacemacs-inactive-transparency 90
   ;; If non nil show the titles of transient states. (default t)
   dotspacemacs-show-transient-state-title t
   ;; If non nil show the color guide hint for transient state keys. (default t)
   dotspacemacs-show-transient-state-color-guide t
   ;; If non nil unicode symbols are displayed in the mode line. (default t)
   dotspacemacs-mode-line-unicode-symbols t
   ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
   ;; scrolling overrides the default behavior of Emacs which recenters point
   ;; when it reaches the top or bottom of the screen. (default t)
   dotspacemacs-smooth-scrolling t
   ;; Control line numbers activation.
   ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
   ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
   ;; This variable can also be set to a property list for finer control:
   ;; '(:relative nil
   ;;   :disabled-for-modes dired-mode
   ;;                       doc-view-mode
   ;;                       markdown-mode
   ;;                       org-mode
   ;;                       pdf-view-mode
   ;;                       text-mode
   ;;   :size-limit-kb 1000)
   ;; (default nil)
   dotspacemacs-line-numbers 'relative
   ;; Code folding method. Possible values are `evil' and `origami'.
   ;; (default 'evil)
   dotspacemacs-folding-method 'evil
   ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
   ;; (default nil)
   dotspacemacs-smartparens-strict-mode nil
   ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
   ;; over any automatically added closing parenthesis, bracket, quote, etc…
   ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
   dotspacemacs-smart-closing-parenthesis nil
   ;; Select a scope to highlight delimiters. Possible values are `any',
   ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
   ;; emphasis the current one). (default 'all)
   dotspacemacs-highlight-delimiters 'all
   ;; If non nil, advise quit functions to keep server open when quitting.
   ;; (default nil)
   dotspacemacs-persistent-server nil
   ;; List of search tool executable names. Spacemacs uses the first installed
   ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
   ;; (default '("ag" "pt" "ack" "grep"))
   dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
   ;; The default package repository used if no explicit repository has been
   ;; specified with an installed package.
   ;; Not used for now. (default nil)
   dotspacemacs-default-package-repository nil
   ;; Delete whitespace while saving buffer. Possible values are `all'
   ;; to aggressively delete empty line and long sequences of whitespace,
   ;; `trailing' to delete only the whitespace at end of lines, `changed'to
   ;; delete only whitespace for changed lines or `nil' to disable cleanup.
   ;; (default nil)
   dotspacemacs-whitespace-cleanup nil
   ))
 #+END_SRC

* User Init
Initialization function for user code. It is called immediately after
`dotspacemacs/init', before layer configuration executes. This function is
mostly useful for variables that need to be set before packages are loaded. If
you are unsure, you should try in setting them in `dotspacemacs/user-config' first. 

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(defun dotspacemacs/user-init ()
;;  (setq spacemacs-theme-comment-bg nil)
 (setenv "WORKON_HOME" "/opt/anaconda3/envs")
  ;; dotspacemacs-default-font '("SauceCode Pro Nerd Mono"
  ;;                             :size 18
  ;;                             :weight normal
  ;;                             :width normal
                              ;; :powerline-offset 2)
  )
 #+END_SRC
 
* User Config

** Starting user-config  
   Configuration function for user code. This function is called at the very end
   of Spacemacs initialization after layers configuration. This is the place
   where most of your configurations should be done. Unless it is explicitly
   specified that a variable should be set before a package is loaded, you should
   place your code here. 
  
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (defun dotspacemacs/user-config ()
  #+END_SRC
  
** Folders and Locations  
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; Regular Org
  (setq
   org_roam_dir "~/Insync/olavpe/org-roam"
   mendeley_bib_files
   '("~/Documents/BibTex/Olav_Pedersen_PreProject2020.bib"
   "~/Documents/BibTex/Olav_Pedersen_Thesis2020.bib")
   org-directory org_roam_dir
   org-default-notes-file (concat org_roam_dir "/inbox.org")
   )
  ;; Org-Roam
  (setq
   org-roam-directory org_roam_dir
   org-roam-index-file (concat org_roam_dir "/index.org")
   deft-directory org_roam_dir
   org-roam-db-location (concat org_roam_dir "/db/org-roam.db"))
  ;; Bibtex
  (setq
   bibtex-completion-notes-path org_roam_dir
   bibtex-completion-bibliography mendeley_bib_files
   bibtex-completion-library-path '("~/Dropbox/MendeleyDocs/"))
  ;; Org-ref
  (setq
   org-ref-notes-directory org_roam_dir
   org-ref-default-bibliography 
   '("~/Documents/BibTex/Olav_Pedersen_PreProject2020.bib"
   "~/Documents/BibTex/Olav_Pedersen_Thesis2020.bib")
   org-ref-bibliography-notes (concat org_roam_dir "/bibnotes.org"))
#+END_SRC
 
** Programming Languages
***  C 
    Simply sets the correct comment style as "//"
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
 #+END_SRC
 
*** Python
    Starting anaconda mode when starting python mode
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (add-hook 'python-mode-hook 'anaconda-mode)
 #+END_SRC
 
*** MATLAB config 
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    ;; Matlab
    (defun init-matlab ()
      "Initializes my configuration for matlab mode."
      (interactive)
      (setq matlab-indent-function "")
      (setq matlab-shell-command ""))

    (add-hook 'matlab-mode-hook 'init-matlab)
   #+END_SRC
   
  
** Magit Settings 
  
*** Evil-Magit 
    This option is set to ensure that the keybindings 'j' and 'k' can be used
     for navigating up and down. If the following option is activated it enables
     a visual mode for magit, but overrides more natural vim bindings 'j' and 'k'.
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    ;; (setq evil-magit-use-y-for-yank nil)
  #+END_SRC
  
** Writing Settings  
*** Markdown settings 
**** Pandoc Settings 
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     (add-hook 'markdown-mode-hook 'pandoc-mode)
     (setq markdown-command "/usr/bin/pandoc")
    #+END_SRC
    
**** Turning on automatic newline and autofill
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     (add-hook 'markdown-mode-hook '(lambda () (setq fill-column 80)))
     (add-hook 'markdown-mode-hook 'auto-fill-mode)
     (add-hook 'markdown-mode-hook 'turn-on-font-lock)
    #+END_SRC
 
*** LaTeX settings 
    When running latex build (, b) by default it will run "main.tex"
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (setq-default TeX-master "main")
   #+END_SRC
    This hides and shows text. The `outline-minor-mode` is used to fold text in
    headings and such. "Folding" in latex allows you to hide the environment types
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (setq latex-enable-folding t)
    (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
    TeX-source-correlate-start-server t
    )
    ;; revert pdf-view after compilation
    (add-hook 'TeX-after-compilation-finished-functions #'TeX-revert-document-buffer)
   #+END_SRC
  
**** TODO Clean up this section and fiugre out how to specify the folder path latex  
   
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
          (setq TeX-source-correlate-method 'synctex)
          (setq TeX-source-correlate-mode t)
          (setq TeX-source-correlate-start-server t)
          (setq latex-enable-magic t)
          (setq TeX-PDF-mode t)
          (setq reftex-cite-format 'natbib)
          (setq reftex-index-phrases-case-fold-search t)
   #+END_SRC
   
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (add-hook 'LaTeX-mode-hook (lambda ()
                                 (push 
                                  '("Make" "latexmk -outdir=/tmp %t" TeX-run-TeX nil t
                                    :help "Make pdf output using latexmk.")
                                  TeX-command-list)))
   #+END_SRC

   This is a function that will run latex build every time you save, currently
   not active
   
   #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (defun run-latex ()
      (interactive)
      (let ((process (TeX-active-process))) (if process (delete-process process)))
      (let ((TeX-save-query nil)) (TeX-save-document ""))
      (TeX-command-menu "latex/build"))
    ;; (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd ":w") #'run-latex)))
   #+END_SRC
   
**** PDF-tools as default for LaTeX mode
    
     This is for using the built in pdfviewer in emacs
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
       (setq-default TeX-master "main") ;; All master files called "main".
       (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
             TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
             TeX-source-correlate-start-server t)
  #+END_SRC
 
** Org Settings 
   
*** Defining the keywords agenda terms
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     (setq org-todo-keywords '((sequence "TODO(t)" "PROGRESS(p)" "WAIT(w)" "|" "DONE(d)" "CANCEL(c)")))
    #+END_SRC
    
*** Turning on automatic newline
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
      (add-hook 'org-mode-hook 'auto-fill-mode)
      (add-hook 'org-mode-hook 'turn-on-font-lock)
    #+END_SRC
    
*** Settings for bullets and ellipsis
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (setq org-ellipsis "⤵")
      (add-hook 'org-mode-hook 'org-superstar-mode)
      (setq org-hide-leading-stars nil)
      (setq org-superstar-leading-bullet ?\s)
    #+END_SRC
    
*** Checklist completion changes TODO to DONE 
    
     Switch header TODO state to DONE when all checkboxes are ticked, to TODO
     otherwise 
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (defun my/org-checkbox-todo ()
     (let ((todo-state (org-get-todo-state)) beg end)
       (unless (not todo-state)
         (save-excursion
           (org-back-to-heading t)
           (setq beg (point))
           (end-of-line)
           (setq end (point))
           (goto-char beg)
           (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                                  end t)
               (if (match-end 1)
                   (if (equal (match-string 1) "100%")
                       (unless (string-equal todo-state "DONE")
                         (org-todo 'done))
                     (unless (string-equal todo-state "TODO")
                       (org-todo 'todo)))
                 (if (and (> (match-end 2) (match-beginning 2))
                          (equal (match-string 2) (match-string 3)))
                     (unless (string-equal todo-state "DONE")
                       (org-todo 'done))
                   (unless (string-equal todo-state "TODO")
                     (org-todo 'todo)))))))))

   (add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
    #+END_SRC
    
*** Org-babel
    This is to enable compilation for different source code block environments
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    (org-babel-do-load-languages
 'org-babel-load-languages
 '((python . t)
   (R . t)))
#+END_SRC   
 
*** Toggles LaTeX fragment 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (defvar org-latex-fragment-last nil
      "Holds last fragment/environment you were on.")

      (defun org-latex-fragment-toggle ()
        "Toggle a latex fragment image "
        (and (eq 'org-mode major-mode)
            (let* ((el (org-element-context))
                    (el-type (car el)))
              (cond
                ;; were on a fragment and now on a new fragment
                ((and
                  ;; fragment we were on
                  org-latex-fragment-last
                  ;; and are on a fragment now
                  (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type))
                  ;; but not on the last one this is a little tricky. as you edit the
                  ;; fragment, it is not equal to the last one. We use the begin
                  ;; property which is less likely to change for the comparison.
                  (not (= (org-element-property :begin el)
                          (org-element-property :begin org-latex-fragment-last))))
                ;; go back to last one and put image back
                (save-excursion
                  (goto-char (org-element-property :begin org-latex-fragment-last))
                  (org-preview-latex-fragment))
                ;; now remove current image
                (goto-char (org-element-property :begin el))
                (let ((ov (loop for ov in org-latex-fragment-image-overlays
                                if
                                (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                return ov)))
                  (when ov
                    (delete-overlay ov)))
                ;; and save new fragment
                (setq org-latex-fragment-last el))

                ;; were on a fragment and now are not on a fragment
                ((and
                  ;; not on a fragment now
                  (not (or
                        (eq 'latex-fragment el-type)
                        (eq 'latex-environment el-type)))
                  ;; but we were on one
                  org-latex-fragment-last)
                ;; put image back on
                (save-excursion
                  (goto-char (org-element-property :begin org-latex-fragment-last))
                  (org-preview-latex-fragment))
                ;; unset last fragment
                (setq org-latex-fragment-last nil))

                ;; were not on a fragment, and now are
                ((and
                  ;; we were not one one
                  (not org-latex-fragment-last)
                  ;; but now we are
                  (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
                (goto-char (org-element-property :begin el))
                ;; remove image
                (let ((ov (loop for ov in org-latex-fragment-image-overlays
                                if
                                (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                return ov)))
                  (when ov
                    (delete-overlay ov)))
                (setq org-latex-fragment-last el))))))


      (add-hook 'post-command-hook 'org-latex-fragment-toggle)
 #+END_SRC

*** Org-pdftools and Org-noter
    Using different packages
    #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (use-package org-pdftools
        :hook (org-mode . org-pdftools-setup-link))

      (use-package org-noter
        :after (:any org pdf-view)
        :config
        (setq org-noter-always-create-frame nil
              org-noter-notes-window-location 'other-frame
              org-noter-hide-other nil
              org-noter-insert-note-no-questions t
              org-noter-separate-notes-from-heading t
              org-noter-notes-search-path (list org_roam_dir)
              org-noter-auto-save-last-location t))

      (use-package org-noter-pdftools
        :after org-noter
        :config
        (with-eval-after-load 'pdf-annot
          (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
    #+END_SRC
    
*** Org-Roam
   This sets the org roam directory and starts org-roam on startup.
   If you want to add more good org-roam config information checkout the
   following link: https://rgoswami.me/posts/org-note-workflow/#org-noter 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (add-hook 'after-init-hook 'org-roam-mode)
 #+END_SRC
 
*** Org-Roam-Server
   These are the settings for setting up org-roam-server in order to visualize
   all the work being done in org-roam
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
 #+END_SRC
 
*** Org-Ref
    This section was copied from Ian Jones, as much of the settings above, but
this section was originally found at: https://rgoswami.me/posts/org-note-workflow/#org-ref 
 - ~org-ref-get-pdf-filename-function~ will use helm-bibtex settings to find the pdf
 - ~org-ref-notes-function~, currently this will expect one file per pdf and to
   use ~org-roam~ rather than ref or bibtex systems.
   
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (use-package org-ref
       :config
       (setq
        org-ref-completion-library 'org-ref-ivy-cite
        org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
        org-ref-notes-directory "~/Insync/olavpe/org-roam/"
        org-ref-notes-function 'orb-edit-notes
       ))
    #+END_SRC

**** Cheatsheet for using org-ref fields 

     These are format specifiers for org-ref. The are *not* the same as the keys
     in the .bib files.
     
#+BEGIN_EXAMPLE
In the format, the following percent escapes will be expanded.
%l The BibTeX label of the citation.
%a List of author names, see also \`reftex-cite-punctuation&rsquo;.
%2a Like %a, but abbreviate more than 2 authors like Jones et al.
%A First author name only.
%e Works like %a, but on list of editor names. (%2e and %E work as well)
It is also possible to access all other BibTeX database fields:
%b booktitle %c chapter %d edition %h howpublished
%i institution %j journal %k key %m month
%n number %o organization %p pages %P first page
%r address %s school %u publisher %t title
%v volume %y year
%B booktitle, abbreviated %T title, abbreviated
%U url
%D doi
%S series %N note
%f pdf filename
%F absolute pdf filename
Usually, only %l is needed. The other stuff is mainly for the echo area
display, and for (setq reftex-comment-citations t).
%< as a special operator kills punctuation and space around it after the
string has been formatted.
A pair of square brackets indicates an optional argument, and RefTeX
will prompt for the values of these arguments.
#+END_EXAMPLE
    
*** Org-Roam-Bibtex
   This sets the org roam directory and starts org-roam on startup.
 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (use-package org-roam-bibtex
        :after org-roam
        :hook (org-roam-mode . org-roam-bibtex-mode))

      (setq orb-preformat-keywords
          '("citekey" "title" "url" "author-or-editor" "keywords" "file"))
#+end_src

#   The code is a snippet is a template for orb
#  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
#      (setq orb-templates
#            '(("r" "ref" plain (function org-roam-capture--get-point)
#               ""
#               :file-name "${slug}"
#               :head "#+TITLE: ${=key=}: ${title}\n#+ROAM_KEY: ${ref}
#    - tags ::
#    - keywords :: ${keywords}
#    \n* ${title}\n  :PROPERTIES:\n  :Custom_ID: ${=key=}\n  :URL: ${url}\n  :AUTHOR: ${author-or-editor}\n  :NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n  :NOTER_PAGE: \n  :END:\n\n"
#               :unnarrowed t))))
# #+end_src

 This is an org-roam-bibtex template taken from
 https://www.philipperambert.com/Installing-Org-Roam-Bibtex-In-Spacemacs 
 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(setq orb-preformat-keywords
      '("citekey" "title" "url" "author-or-editor" "keywords" "file")
      orb-process-file-keyword t
      orb-file-field-extensions '("pdf"))

   (setq orb-templates
       '(("r" "ref" plain (function org-roam-capture--get-point)
           ""
           :file-name "${citekey}"
           :head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}

   - tags ::
   - keywords :: ${keywords}

    ,* ${title}
    :PROPERTIES:
    :Custom_ID: ${citekey}
    :URL: ${url}
    :AUTHOR: ${author-or-editor}
    :NOTER_DOCUMENT: ${file}
    :NOTER_PAGE:
    :END:")))

 #+END_SRC

*** Autopairing

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      ;; For autopairing in org-mode
      (with-eval-after-load 'org
        ;; (modify-syntax-entry ?/ "(/" org-mode-syntax-table)
        ;; (modify-syntax-entry ?= "(=" org-mode-syntax-table)
        (modify-syntax-entry ?\$ "($" org-mode-syntax-table)
        (modify-syntax-entry ?\( "()" org-mode-syntax-table)
        (modify-syntax-entry ?\[ "(]" org-mode-syntax-table)
        (add-hook 'org-mode-hook 'electric-pair-mode))
 #+END_SRC
 
 
** Bibtex Settings  
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (setq
    bibtex-completion-pdf-field "file"
    bibtex-completion-notes-template-multiple-files
    (concat
     "#+TITLE: ${title}\n"
     "#+ROAM_KEY: cite:${=key=}\n"
     "* TODO Notes\n"
     ":PROPERTIES:\n"
     ":Custom_ID: ${=key=}\n"
     ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
     ":AUTHOR: ${author-abbrev}\n"
     ":JOURNAL: ${journaltitle}\n"
     ":DATE: ${date}\n"
     ":YEAR: ${year}\n"
     ":DOI: ${doi}\n"
     ":URL: ${url}\n"
     ":END:\n\n"
     ))
 #+END_SRC
   
** Theme Stuff
***  Setting cursor and spaceline theme
   
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (use-package ewal-evil-cursors
        :after (ewal-spacemacs-themes)
        :config (ewal-evil-cursors-get-colors
                 :apply t :spaceline t))
      (use-package spaceline
        :after (ewal-evil-cursors winum)
        :init (setq powerline-default-separator nil)
        :config (spaceline-spacemacs-theme))
 #+END_SRC
 
*** Alternate Xresources Theme 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      ;; Xresources (that is functional)
      ;; (load-theme 'xresources t)
 #+END_SRC
 
*** Disabling highlight for comments

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (global-hl-line-mode -1)
      (spacemacs/toggle-highlight-current-line-globally-off)
 #+END_SRC

** Finishing user-config
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
)
 #+END_SRC

* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

