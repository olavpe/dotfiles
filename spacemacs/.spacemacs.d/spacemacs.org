#+TITLE: Spacemacs Tangled User Configuration
#+STARTUP: headlines
#+STARTUP: nohideblocks
#+STARTUP: noindent
#+OPTIONS: toc:4 h:4
#+PROPERTY: header-args:emacs-lisp :comments link

* Spacemacs Layers
   Configuration Layers declaration. You should not put any user code in this
   function besides modifying the variable values. 
** Function start and default settings
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun dotspacemacs/layers ()
    (setq-default
     ;; Base distribution to use. This is a layer contained in the directory
     ;; `+distribution'. For now available distributions are `spacemacs-base'
     ;; or `spacemacs'. (default 'spacemacs)
     dotspacemacs-distribution 'spacemacs
     ;; Lazy installation of layers (i.e. layers are installed only when a file
     ;; with a supported type is opened). Possible values are `all', `unused'
     ;; and `nil'. `unused' will lazy install only unused layers (i.e. layers
     ;; not listed in variable `dotspacemacs-configuration-layers'), `all' will
     ;; lazy install any layer that support lazy installation even the layers
     ;; listed in `dotspacemacs-configuration-layers'. `nil' disable the lazy
     ;; installation feature and you have to explicitly list a layer in the
     ;; variable `dotspacemacs-configuration-layers' to install it.
     ;; (default 'unused)
     ;; dotspacemacs-enable-lazy-installation 'all
     dotspacemacs-enable-lazy-installation 'unused
     ;; If non-nil then Spacemacs will ask for confirmation before installing
     ;; a layer lazily. (default t)
     dotspacemacs-ask-for-lazy-installation t
     ;; If non-nil layers with lazy install support are lazy installed.
     ;; List of additional paths where to look for configuration layers.
     ;; Paths must have a trailing slash (i.e. `~/.mycontribs/')
     dotspacemacs-configuration-layer-path '()
     ;; List of configuration layers to load.
#+END_SRC
 
** Layer Declaration

   Declarations of layers which spacemacs should install. When layers are called
   there are different options for how this should be done

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  dotspacemacs-configuration-layers
  '(csv
    bm
    bibtex
    colors
    javascript
    yaml
    octave
    helm
    auto-completion
    (c-c++ :variables
           c-c++-enable-clang-support t)
    better-defaults
    ;; (conda :variables
    ;;        conda-anaconda-home "/home/olav/.conda/envs")
    (dart :variables
           dart-backend 'lsp) 
    emacs-lisp
    ess
    ;; +lang
    ;; (extra-langs :variables matlab-mode)
    git
    (lsp :variables
          lsp-navgation 'both)
    markdown
    (mu4e :variables
          mu4e-installation-path "/usr/share/emacs/site-lisp")
    my-spaceline
    (latex :variables
           ;; latex-build-command "LaTeX"
           latex-enable-auto-fill t
           latex-enable-folding t
           latex-enable-magic t)
    pandoc
    (python :variables
            python-backend 'lsp)
    pdf
    ;; ipython-notebook
    (org :variables
        org-enable-roam-support t)
    restclient
    rust
    (shell :variables
           shell-default-shell 'shell
           shell-default-height 30
           shell-default-position 'bottom)
    ;; (spacemacs-spaceline :location local)
    spell-checking
    syntax-checking
    ;; version-control
    )
#+END_SRC

** Additional packages to install
   
  List of additional packages that will be installed without being wrapped in a
  layer. If you need some configuration for these packages, then consider creating
  a layer. You can also put the configuration in `dotspacemacs/user-config'.

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  dotspacemacs-additional-packages '(
                                     ein
                                     jupyter
                                     xresources-theme
                                     ;; org-bullets
                                     ;; (org-roam :location (recipe :fetcher github :repo "jethrokuan/org-roam"))
                                     sqlite3
                                     smtpmail
                                     ;; all-the-icons
                                     ;; spaceline-all-the-icons
                                     ;; flycheck-pycheckers
                                     lsp-dart
                                     org-pdftools
                                     org-noter-pdftools
                                     org-roam-bibtex
                                     org-roam-server
                                     ox-hugo
                                     ;; ewal
                                     ewal-spacemacs-themes
                                     ewal-evil-cursors
                                     autopair
                                     mu4e-marker-icons
                                     matlab-mode
                                     yasnippet-classic-snippets
                                     yasnippet-snippets
                                     )
#+END_SRC

** Extra package options 
  - "Frozen Packages" is list of packages that you do not want to be updated
  - "Excluded Packages" is list of packages that will not be installed or loaded
  - 'Install packages': Defines the behaviour of Spacemacs when installing packages.
    - 'used-only': installs only explicitly used packages and uninstall any
      unused packages as well as their unused dependencies.   
    - `used-but-keep-unused': installs only the used packages but won't
      uninstall them if they become unused.
    - `all' installs *all* packages supported by Spacemacs and never uninstall
      them. (default is `used-only')  
 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     dotspacemacs-frozen-packages '()
     dotspacemacs-excluded-packages '()
     dotspacemacs-install-packages 'used-only))
#+END_SRC
 
* Spacemacs Init 
** Start and several functions
    Initialization function. This function is called at the very startup of
    Spacemacs initialization before layers configuration. You should not put any
    user code in there besides modifying the variable values. 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun dotspacemacs/init ()
    ;; This setq-default sexp is an exhaustive list of all the supported
    ;; spacemacs settings.
    (setq-default
     ;; If non nil ELPA repositories are contacted via HTTPS whenever it's
     ;; possible. Set it to nil if you have no way to use HTTPS in your
     ;; environment, otherwise it is strongly recommended to let it set to t.
     ;; This variable has no effect if Emacs is launched with the parameter
     ;; `--insecure' which forces the value of this variable to nil.
     ;; (default t)
     ;; dotspacemacs-elpa-https t
     dotspacemacs-elpa-https t
     ;; Maximum allowed time in seconds to contact an ELPA repository.
     dotspacemacs-elpa-timeout 5
     ;; If non nil then spacemacs will check for updates at startup
     ;; when the current branch is not `develop'. Note that checking for
     ;; new versions works via git commands, thus it calls GitHub services
     ;; whenever you start Emacs. (default nil)

     ;; If non-nil then Spacelpa repository is the primary source to install
     ;; a locked version of packages. If nil then Spacemacs will install the
     ;; latest version of packages from MELPA. (default nil)
     dotspacemacs-use-spacelpa t

     ;; If non-nil then verify the signature for downloaded Spacelpa archives.
     ;; (default t)
     dotspacemacs-verify-spacelpa-archives t

     dotspacemacs-check-for-update nil
     ;; If non-nil, a form that evaluates to a package directory. For example, to
     ;; use different package directories for different Emacs versions, set this
     ;; to `emacs-version'.
     dotspacemacs-elpa-subdirectory nil
     ;; One of `vim', `emacs' or `hybrid'.
     ;; `hybrid' is like `vim' except that `insert state' is replaced by the
     ;; `hybrid state' with `emacs' key bindings. The value can also be a list
     ;; with `:variables' keyword (similar to layers). Check the editing styles
     ;; section of the documentation for details on available variables.
     ;; (default 'vim)
     dotspacemacs-editing-style 'vim
     ;; If non nil output loading progress in `*Messages*' buffer. (default nil)
     dotspacemacs-verbose-loading nil
     ;; Specify the startup banner. Default value is `official', it displays
     ;; the official spacemacs logo. An integer value is the index of text
     ;; banner, `random' chooses a random text banner in `core/banners'
     ;; directory. A string value must be a path to an image format supported
     ;; by your Emacs build.
     ;; If the value is nil then no banner is displayed. (default 'official)
     dotspacemacs-startup-banner 'official
     ;; List of items to show in startup buffer or an association list of
     ;; the form `(list-type . list-size)`. If nil then it is disabled.
     ;; Possible values for list-type are:
     ;; `recents' `bookmarks' `projects' `agenda' `todos'."
     ;; List sizes may be nil, in which case
     ;; `spacemacs-buffer-startup-lists-length' takes effect.
     dotspacemacs-startup-lists '((recents . 5)
                                  (projects . 7))
     ;; True if the home buffer should respond to resize events.
     dotspacemacs-startup-buffer-responsive t
     ;; Default major mode of the scratch buffer (default `text-mode')
     dotspacemacs-scratch-mode 'text-mode
#+END_SRC

** Declaring the Theme
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     dotspacemacs-themes '(
                           ;; xresources
                           ewal-spacemacs-modern
                           ;; spacemacs-dark
                           ;;spacemacs-light
                           )
#+END_SRC
 
** Rest of the function

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; If non nil the cursor color matches the state color in GUI Emacs.
  dotspacemacs-colorize-cursor-according-to-state t
  ;; Default font, or prioritized list of fonts. `powerline-scale' allows to
  ;; quickly tweak the mode-line size to make separators look not too crappy.
  dotspacemacs-default-font '(
                              "SauceCodePro Nerd Font"
                              ;; "SourceCodePro"
                              :size 15
                              :weight normal
                              :width normal
                              ;; :powerline-scale 1.1
                              :powerline-scale 1.0
                              )
  ;; The leader key
  dotspacemacs-leader-key "SPC"
  ;; The key used for Emacs commands (M-x) (after pressing on the leader key).
  ;; (default "SPC")
  dotspacemacs-emacs-command-key "SPC"
  ;; The key used for Vim Ex commands (default ":")
  dotspacemacs-ex-command-key ":"
  ;; The leader key accessible in `emacs state' and `insert state'
  ;; (default "M-m")
  dotspacemacs-emacs-leader-key "M-m"
  ;; Major mode leader key is a shortcut key which is the equivalent of
  ;; pressing `<leader> m`. Set it to `nil` to disable it. (default ",")
  dotspacemacs-major-mode-leader-key ","
  ;; Major mode leader key accessible in `emacs state' and `insert state'.
  ;; (default "C-M-m")
  dotspacemacs-major-mode-emacs-leader-key "C-M-m"
  ;; These variables control whether separate commands are bound in the GUI to
  ;; the key pairs C-i, TAB and C-m, RET.
  ;; Setting it to a non-nil value, allows for separate commands under <C-i>
  ;; and TAB or <C-m> and RET.
  ;; In the terminal, these pairs are generally indistinguishable, so this only
  ;; works in the GUI. (default nil)
  dotspacemacs-distinguish-gui-tab nil
  ;; If non nil `Y' is remapped to `y$' in Evil states. (default nil)
  dotspacemacs-remap-Y-to-y$ nil
  ;; If non-nil, the shift mappings `<' and `>' retain visual state if used
  ;; there. (default t)
  dotspacemacs-retain-visual-state-on-shift t
  ;; If non-nil, J and K move lines up and down when in visual mode.
  ;; (default nil)
  dotspacemacs-visual-line-move-text nil
  ;; If non nil, inverse the meaning of `g' in `:substitute' Evil ex-command.
  ;; (default nil)
  dotspacemacs-ex-substitute-global nil
  ;; Name of the default layout (default "Default")
  dotspacemacs-default-layout-name "Default"
  ;; If non nil the default layout name is displayed in the mode-line.
  ;; (default nil)
  dotspacemacs-display-default-layout nil
  ;; If non nil then the last auto saved layouts are resume automatically upon
  ;; start. (default nil)
  dotspacemacs-auto-resume-layouts t
  ;; Size (in MB) above which spacemacs will prompt to open the large file
  ;; literally to avoid performance issues. Opening a file literally means that
  ;; no major mode or minor modes are active. (default is 1)
  dotspacemacs-large-file-size 1
  ;; Location where to auto-save files. Possible values are `original' to
  ;; auto-save the file in-place, `cache' to auto-save the file to another
  ;; file stored in the cache directory and `nil' to disable auto-saving.
  ;; (default 'cache)
  dotspacemacs-auto-save-file-location 'cache
  ;; Maximum number of rollback slots to keep in the cache. (default 5)
  dotspacemacs-max-rollback-slots 5
  ;; If non nil, `helm' will try to minimize the space it uses. (default nil)
  dotspacemacs-helm-resize nil
  ;; if non nil, the helm header is hidden when there is only one source.
  ;; (default nil)
  dotspacemacs-helm-no-header nil
  ;; define the position to display `helm', options are `bottom', `top',
  ;; `left', or `right'. (default 'bottom)
  dotspacemacs-helm-position 'bottom
  ;; Controls fuzzy matching in helm. If set to `always', force fuzzy matching
  ;; in all non-asynchronous sources. If set to `source', preserve individual
  ;; source settings. Else, disable fuzzy matching in all sources.
  ;; (default 'always)
  dotspacemacs-helm-use-fuzzy 'always
  ;; If non nil the paste micro-state is enabled. When enabled pressing `p`
  ;; several times cycle between the kill ring content. (default nil)
  dotspacemacs-enable-paste-transient-state nil
  ;; Which-key delay in seconds. The which-key buffer is the popup listing
  ;; the commands bound to the current keystroke sequence. (default 0.4)
  dotspacemacs-which-key-delay 0.4
  ;; Which-key frame position. Possible values are `right', `bottom' and
  ;; `right-then-bottom'. right-then-bottom tries to display the frame to the
  ;; right; if there is insufficient space it displays it at the bottom.
  ;; (default 'bottom)
  dotspacemacs-which-key-position 'bottom
  ;; If non nil a progress bar is displayed when spacemacs is loading. This
  ;; may increase the boot time on some systems and emacs builds, set it to
  ;; nil to boost the loading time. (default t)
  dotspacemacs-loading-progress-bar t
  ;; If non nil the frame is fullscreen when Emacs starts up. (default nil)
  ;; (Emacs 24.4+ only)
  dotspacemacs-fullscreen-at-startup nil
  ;; If non nil `spacemacs/toggle-fullscreen' will not use native fullscreen.
  ;; Use to disable fullscreen animations in OSX. (default nil)
  dotspacemacs-fullscreen-use-non-native nil
  ;; If non nil the frame is maximized when Emacs starts up.
  ;; Takes effect only if `dotspacemacs-fullscreen-at-startup' is nil.
  ;; (default nil) (Emacs 24.4+ only)
  dotspacemacs-maximized-at-startup nil
  ;; A value from the range (0..100), in increasing opacity, which describes
  ;; the transparency level of a frame when it's active or selected.
  ;; Transparency can be toggled through `toggle-transparency'. (default 90)
  dotspacemacs-active-transparency 90
  ;; A value from the range (0..100), in increasing opacity, which describes
  ;; the transparency level of a frame when it's inactive or deselected.
  ;; Transparency can be toggled through `toggle-transparency'. (default 90)
  dotspacemacs-inactive-transparency 90
  ;; If non nil show the titles of transient states. (default t)
  dotspacemacs-show-transient-state-title t
  ;; If non nil show the color guide hint for transient state keys. (default t)
  dotspacemacs-show-transient-state-color-guide t
  ;; If non nil unicode symbols are displayed in the mode line. (default t)
  dotspacemacs-mode-line-unicode-symbols t
  ;; If non nil smooth scrolling (native-scrolling) is enabled. Smooth
  ;; scrolling overrides the default behavior of Emacs which recenters point
  ;; when it reaches the top or bottom of the screen. (default t)
  dotspacemacs-smooth-scrolling t
  ;; Control line numbers activation.
  ;; If set to `t' or `relative' line numbers are turned on in all `prog-mode' and
  ;; `text-mode' derivatives. If set to `relative', line numbers are relative.
  ;; This variable can also be set to a property list for finer control:
  ;; '(:relative nil
  ;;   :disabled-for-modes dired-mode
  ;;                       doc-view-mode
  ;;                       markdown-mode
  ;;                       org-mode
  ;;                       pdf-view-mode
  ;;                       text-mode
  ;;   :size-limit-kb 1000)
  ;; (default nil)
  dotspacemacs-line-numbers 'relative
  ;; Code folding method. Possible values are `evil' and `origami'.
  ;; (default 'evil)
  dotspacemacs-folding-method 'evil
  ;; If non-nil smartparens-strict-mode will be enabled in programming modes.
  ;; (default nil)
  dotspacemacs-smartparens-strict-mode nil
  ;; If non-nil pressing the closing parenthesis `)' key in insert mode passes
  ;; over any automatically added closing parenthesis, bracket, quote, etc…
  ;; This can be temporary disabled by pressing `C-q' before `)'. (default nil)
  dotspacemacs-smart-closing-parenthesis nil
  ;; Select a scope to highlight delimiters. Possible values are `any',
  ;; `current', `all' or `nil'. Default is `all' (highlight any scope and
  ;; emphasis the current one). (default 'all)
  dotspacemacs-highlight-delimiters 'all
  ;; If non nil, advise quit functions to keep server open when quitting.
  ;; (default nil)
  dotspacemacs-persistent-server nil
  ;; List of search tool executable names. Spacemacs uses the first installed
  ;; tool of the list. Supported tools are `ag', `pt', `ack' and `grep'.
  ;; (default '("ag" "pt" "ack" "grep"))
  dotspacemacs-search-tools '("ag" "pt" "ack" "grep")
  ;; The default package repository used if no explicit repository has been
  ;; specified with an installed package.
  ;; Not used for now. (default nil)
  dotspacemacs-default-package-repository nil
  ;; Delete whitespace while saving buffer. Possible values are `all'
  ;; to aggressively delete empty line and long sequences of whitespace,
  ;; `trailing' to delete only the whitespace at end of lines, `changed'to
  ;; delete only whitespace for changed lines or `nil' to disable cleanup.
  ;; (default nil)
  dotspacemacs-whitespace-cleanup nil
  ))
#+END_SRC

* User Init
  Initialization function for user code. It is called immediately after
  `dotspacemacs/init', before layer configuration executes. This function is
  mostly useful for variables that need to be set before packages are loaded. If
  you are unsure, you should try in setting them in `dotspacemacs/user-config' first. 

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun dotspacemacs/user-init ()
  ;;  (setq spacemacs-theme-comment-bg nil)
    ;; (setenv "WORKON_HOME" "/opt/anaconda3/envs")
    (setq spacemacs-theme-comment-bg nil)
    ;; (add-to-list 'load-path "/home/olav/.spacemacs.d/")
    ;; (setq dotspacemacs-configuration-layer-path "/home/olav/.spacemacs.d/")
    (setenv "WORKON_HOME" "/home/olav/.conda/envs")
            ;; '("/home/olav/.conda/envs" "/home/olav/perception-router-digitaltwin/perception-router-digitaltwin/"))
    )
#+END_SRC
 
* User Config

** Starting user-config
   Configuration function for user code. This function is called at the very end
   of Spacemacs initialization after layers configuration. This is the place
   where most of your configurations should be done. Unless it is explicitly
   specified that a variable should be set before a package is loaded, you should
   place your code here. 
  
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (defun dotspacemacs/user-config ()
  #+END_SRC
  
** General Functions for Emacs 
*** Pop-info about function
    
   This function was found at [[http://blog.jenkster.com/2013/12/popup-help-in-emacs-lisp.html][this site]]. This code is actually fairly simple, so
   Then we just call ~popup-tip~ to display it. This function does not function
   completely as expect yet as it show th results in a split window.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (defun describe-thing-in-popup ()
   (interactive)
   (let* ((thing (symbol-at-point))
          (help-xref-following t)
          (description (with-temp-buffer
                         (help-mode)
                         (help-xref-interned thing)
                         (buffer-string))))
     (popup-tip description
                :point (point)
                :around t
                :height 30
                :scroll-bar t
                :margin t)))
#+END_SRC

*** Opening Spacemacs.org
    Function to open this literate ~spacemacs.org~ configuration file. This
    could be done in the one liner, but then the name did not in the minibuffer
    when using keybindings
    
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun open-org-config-file ()
     (interactive)
     (find-file "~/.spacemacs.d/spacemacs.org"))
#+END_SRC
   
*** Opening BigArch.org for system note taking
    Function to open this literate ~BigArch.org~ configuration file. This file
    is intended to help me keep notes on system things that I will likely forget
    I have done. This function could be one liner, but then the name did not in
    the mini-buffer when using keybindings. 
    
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun open-system-notes-file ()
     (interactive)
     (find-file "~/Insync/olavpe/BigArch.org"))
#+END_SRC
   
** Search and Helm Settings 
   
   This is to turn on follow mode for helm commands. On very large projects or
   files, this could cause Emacs to crash, but it is supposed to be a very nice function.
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq helm-follow-mode-persistent t) 
#+END_SRC
   
** Folders and Locations  
   
   Note: org_agenda_dir is set as relative to org-directory in order to play
   nicely with org-capture.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; Regular Org
  (setq
   org_roam_dir "~/Insync/olavpe/org-roam"
   ;; org_agenda_dir "../../Dropbox/org-agenda/"
   org_agenda_dir "/home/olav/Dropbox/org-agenda/"
   mendeley_bib_files
   '("~/Documents/BibTex/Olav_Pedersen_PreProject2020.bib"
   "~/Documents/BibTex/Olav_Pedersen_Thesis2021.bib")
   org-directory org_roam_dir
   org-default-notes-file (concat org_roam_dir "/inbox.org")
   )
  ;; Org-Agenda
  (with-eval-after-load 'org (setq
   org-agenda-files '("/home/olav/Dropbox/org-agenda/life.org"
                      "/home/olav/Dropbox/org-agenda/masters.org"
                      "/home/olav/Dropbox/org-agenda/masters_meetings.org"
                      "/home/olav/Dropbox/org-agenda/skytrack.org"
                      "/home/olav/Dropbox/org-agenda/thesis.org"
                      "/home/olav/Dropbox/org-agenda/recommendations.org"
                      "/home/olav/Dropbox/org-agenda/hobbies.org")
   ))
  ;; Org-Roam
  (setq
   org-roam-directory org_roam_dir
   org-roam-index-file (concat org_roam_dir "/index.org")
   deft-directory org_roam_dir
   org-roam-db-location (concat org_roam_dir "/org-roam.db"))
  ;; Bibtex
  (setq
   bibtex-completion-notes-path org_roam_dir
   bibtex-completion-bibliography mendeley_bib_files
   bibtex-completion-library-path '("~/Dropbox/MendeleyDocs/"))
   ;; bibtex-completion-notes-path (concat org_roam_dir "/bibnotes.org"))
  ;; Org-ref
  (setq
   org-ref-notes-directory org_roam_dir
   org-ref-default-bibliography 
   '("~/Documents/BibTex/Olav_Pedersen_PreProject2020.bib"
     "~/Documents/BibTex/Olav_Pedersen_Thesis2021.bib")
   org-ref-bibliography-notes (concat org_roam_dir "/bibnotes.org")
   ;; org-ref-default-bibliography mendeley_bib_files
   ;; org-ref-pdf-directory "~/Dropbox/MendeleyDocs/"
   ;; org-ref-pdf-directory
   )
#+END_SRC
 
** Hydras
   
   Hydra is used in attempt to make the helm buffers more manageable.
   The following function was found at this [[https://github.com/abo-abo/hydra/wiki/Helm][site]], which also suggests two
   additional functions to avoid answering yes/no questions.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(with-eval-after-load 'helm 
  (defhydra helm-like-unite (:hint nil
                             :color pink)
  "
  Nav ^^^^^^^^^        Mark ^^          Other ^^       Quit
  ^^^^^^^^^^------------^^----------------^^----------------------
  _K_ ^ ^ _k_ ^ ^     _m_ark           _v_iew         _i_: cancel
  ^↕^ _h_ ^✜^ _l_     _t_oggle mark    _H_elp         _o_: quit
  _J_ ^ ^ _j_ ^ ^     _U_nmark all     _d_elete
  ^^^^^^^^^^                           _f_ollow: %(helm-attr 'follow)
  "
    ;; arrows
    ("h" helm-beginning-of-buffer)
    ("j" helm-next-line)
    ("k" helm-previous-line)
    ("l" helm-end-of-buffer)
    ;; beginning/end
    ("g" helm-beginning-of-buffer)
    ("G" helm-end-of-buffer)
    ;; scroll
    ("K" helm-scroll-other-window-down)
    ("J" helm-scroll-other-window)
    ;; mark
    ("m" helm-toggle-visible-mark)
    ("t" helm-toggle-all-marks)
    ("U" helm-unmark-all)
    ;; exit
    ("<escape>" keyboard-escape-quit "" :exit t)
    ("o" keyboard-escape-quit :exit t)
    ("i" nil)
    ;; sources
    ("}" helm-next-source)
    ("{" helm-previous-source)
    ;; rest
    ("H" helm-help)
    ("v" helm-execute-persistent-action)
    ("d" helm-persistent-delete-marked)
    ("f" helm-follow-mode))

  (define-key helm-map (kbd "<escape>") 'helm-like-unite/body)
  (define-key helm-map (kbd "C-k") 'helm-like-unite/body)
  (define-key helm-map (kbd "C-o") 'helm-like-unite/body))
#+END_SRC
   
** LSP-mode
   This ensures that ~lsp-imenu~ always runs with lsp-mode.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; (add-hook 'lsp-after-open-hook 'lsp-enable-imenu)  
  ;; (add-hook 'python-mode-hook 'lsp-deferred)
  ;; Turing off autodoc as it makes navigation painfully slow.
  (setq lsp-ui-doc-enable nil)
  (setq lsp-navigation 'both)
#+END_SRC
   
** Flycheck and Linting stuff
   
   The ~syntax-highlighting~ layer has been enabled which contains the flycheck
   package. Global settings can be set, but project specific settings can be set
   using a ~.dir-locals.el~. This will load the variables in this file and apply
   them to any buffer running within the same folder or any subfolder. 
   
   The ~flycheck-pycheckers~ package is an additional package which assists in
   having multiple syntax checkers active at the same time for ~flycheck~ in
   python. There were some issues with this packages so it is not needed
   with the newer version of flychecker. The bottom code snippet needs should
   active to run the function. 
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; (setq flycheck-pycheckers-checkers '(flake8 pylint))
  ;; (setq flycheck-python-pylint-executable "~/.pylintrc")

  ;; Specify default global pylintrc file
  (setq flycheck-pylintrc "~/.pylintrc")

  ;; (with-eval-after-load 'flycheck
  ;;   (add-hook 'flycheck-mode-hook #'flycheck-pycheckers-setup)) 
#+END_SRC
   
*** When using venv in python
    In order for the syntax highlighter to know which packages you are using,
    it needs to know what python environment you are using. To be able to set
    flycheck to know which linter to use and which environment you are using you
    can create a ~.dir-locals.el~ file in the repo root folder with the
    following contents. The variables have to point to current python
    environment. This was snagged from this stack [[https://stackoverflow.com/questions/31443527/how-can-i-make-flycheck-use-virtualenv][site.]]
    
#+begin_src elisp
((python-mode
  (flycheck-python-flake8-executable . "~/gitRepos/python-sdk/venv/bin/python")
  (flycheck-python-pylint-executable . "~/gitRepos/python-sdk/venv/bin/pylint")))
#+end_src

*** Flake8
    
    Setting the ~flycheck-python-flake8-executable~ variable in the
    ~.dir-locals.el~ file will set the flake8 linter properly for current
    system. I have had no issues so far. *This should be used in each project
    .dir-locals.el* 

*** Pylint
    
    Pylint is a bitch. Spent hours mucking around with ~pylint-venv~ [[https://pypi.org/project/pylint-venv/][package]].
    The idea I had was to set emacs to use the system ~pylint~ package as the
    default and then add the path to potential venvs as described [[https://github.com/jgosmann/pylint-venv/pull/9/commits/9e2abbff09fd9b71f55ecf42168500a9bd9ffc51][here]]. This was
    done by creating a system wide ~/.pylintrc~ file to include [[https://stackoverflow.com/questions/1899436/pylint-unable-to-import-error-how-to-set-pythonpath][this
    supplemental link]].

    It turns out it was working, but there was a problem with
    ~pylint~ for the ~pydantic~ package, which the [[https://github.com/samuelcolvin/pydantic/issues/1961][error]] I thought indicated the
    environment was not working (I added the solution in issue in the error
    link).

    Another issue with pylint was it have an
    ~attemped-relative-import-beyond-top-level-package~ which was perfectly
    described and should be fixed by the outcome of [[https://github.com/flycheck/flycheck/issues/1758][this]] issue. However, I could
    not get spacemacs to update to the newest version of ~flycheck~.
    Unfortunately, I did not implement commit directly as there were other
    variables which did not exist. Replacing ~from .generic import
    UtcTimedSignal, ...~ with the full path ~from common_library.models.generic
    import UtcTimedSignal, ...~ makes the pylint error go away.
    
    Currently, ~dir-locals.el~ contains the executable link as described above,
    but it uses the global ~~/.pylintrc~ config file, and seems to work. Unsure
    if ~pylint-venv~ package needs to be installed in any of the environments.

** Magit Settings 
*** Evil-Magit 
    This option is set to ensure that the keybindings 'j' and 'k' can be used
     for navigating up and down. If the following option is activated it enables
     a visual mode for magit, but overrides more natural vim bindings 'j' and 'k'.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; (setq evil-magit-use-y-for-yank nil)
#+END_SRC
 
** Mu4e
*** General Settings 
    
    These were taken and adopted from [[https://gitlab.com/dwt1/dotfiles/-/blob/master/.doom.d/config.org#mu4e][DistroTubes]] gitlab dotfiles.

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (add-to-list 'load-path "/usr/local/share/emacs/site-lisp/mu4e")
  (require 'mu4e)

  (setq user-full-name  "Olav Landmark Pedersen"
        mu4e-get-mail-command "mbsync -c ~/.config/mu4e/mbsyncrc -a"
        ;; This option is to avoid mail syncing issues with gmail
        mu4e-change-filenames-when-moving t
        mu4e-update-interval  300
        mu4e-main-buffer-hide-personal-addresses t
        message-send-mail-function 'smtpmail-send-it
        starttls-use-gnutls t
        mu4e-maildir-shortcuts
        '(
          ("/olavpe-gmail/INBOX"     . ?i)
          ("/olavpe-gmail/[Gmail]/Sent Mail" . ?s)
          ("/olavpe-gmail/[Gmail]/Drafts"    . ?d)
          ("/olavpe-gmail/[Gmail]/Trash"     . ?t)
          ("/olavlp-ntnu/INBOX"              . ?I)
          ("/olavlp-ntnu/Sendte elementer"   . ?S)
          ("/olavlp-ntnu/Kladd"              . ?D)
          ("/olavlp-ntnu/Slettede elementer" . ?T)
)
        mu4e-view-show-addresses t
)

  (setq mu4e-contexts
        (list
        ;; Work account
        (make-mu4e-context
          :name "Gmail"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/olavpe-gmail" (mu4e-message-field msg :maildir))))
          :vars '(
                  (user-mail-address . "olavpe@gmail.com")
                  (user-full-name    . "Olav Pedersen")
                  (mu4e-sent-folder . "/olavpe-gmail/[Gmail]/Sent Mail")
                  (mu4e-drafts-folder . "/olavpe-gmail/[Gmail]/Drafts")
                  (mu4e-trash-folder . "/olavpe-gmail/[Gmail]/Trash")
                  (mu4e-refile-folder . "/olavpe-gmail/[Gmail]/All Mail")
                  (mu4e-compose-signature . 
                    (concat
                      "Best regards,\n"
                      "Olav Pedersen\n"
                      "olavpe@gmail.com\n"))
                  ;; (smtpmail-auth-credentials "/home/olav/.config/mu4e/mbsyncpass-olavpe-gmail-App.gpg")
                  (smtpmail-starttls-credentials . '(("smtp.gmail.com" 587 nil nil)))
                  (smtpmail-default-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-server . "smtp.gmail.com")
                  (smtpmail-smtp-user . "olavpe@gmail.com")
                  (smtpmail-stream-type . starttls)
                  (smtpmail-smtp-service . 587))
)

        ;; Personal account
        (make-mu4e-context
          :name "NTNU"
          :match-func
            (lambda (msg)
              (when msg
                (string-prefix-p "/olavlp-ntnu" (mu4e-message-field msg :maildir))))
          :vars '(
                  (user-mail-address . "olavlp@stud.ntnu.no")
                  (user-full-name . "Olav Pedersen")
                  (mu4e-sent-folder . "/olavlp-ntnu/Sendte elementer")
                  (mu4e-drafts-folder . "/olavlp-ntnu/Kladd")
                  (mu4e-trash-folder . "/olavlp-ntnu/Slettede elementer")
                  (mu4e-compose-signature .
                    (concat
                      "Best regards,\n"
                      "Olav Pedersen\n"
                      "olavlp@stud.ntnu.no\n"))
                  ;; (smtpmail-auth-credentials "/home/olav/.config/mu4e/mbsyncpass-olavlp-ntnu.gpg")
                  (smtpmail-starttls-credentials . '(("smtp.office365.com" 587 nil nil)))
                  (smtpmail-default-smtp-server . "smtp.office365.com")
                  (smtpmail-smtp-server . "smtp.office365.com")
                  (smtpmail-smtp-user . "olavlp@ntnu.no")
                  (smtpmail-stream-type . starttls)
                  (smtpmail-smtp-service . 587)))))

#+END_SRC
  
*** Account specific headings 
 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; (defvar my-mu4e-account-alist
  ;;   '(("olavpe-gmail"
  ;;      (mu4e-sent-folder "/olavpe-gmail/[Gmail]/Sent Mail")
  ;;      (mu4e-drafts-folder "/olavpe-gmail/[Gmail]/Drafts")
  ;;      (mu4e-trash-folder "/olavpe-gmail/[Gmail]/Trash")
  ;;      (mu4e-refile-folder "/olavpe-gmail/[Gmail]/All Mail")
  ;;      (mu4e-compose-signature
  ;;        (concat
  ;;          "Best regards,\n"
  ;;          "Olav Pedersen\n"
  ;;          "olavpe@gmail.com\n"))
  ;;      (user-mail-address "olavpe@gmail.com")
  ;;      (smtpmail-auth-credentials "/home/olav/.config/mu4e/mbsyncpass-olavpe-gmail-App.gpg")
  ;;      (smtpmail-starttls-credentials '(("smtp.gmail.com" 587 nil nil)))
  ;;      (smtpmail-default-smtp-server "smtp.gmail.com")
  ;;      (smtpmail-smtp-server "smtp.gmail.com")
  ;;      (smtpmail-smtp-user "olavpe@gmail.com")
  ;;      (smtpmail-stream-type starttls)
  ;;      (smtpmail-smtp-service 587))

  ;;     ("olavlp-ntnu"
  ;;      (mu4e-sent-folder "/olavlp-ntnu/Sendte elementer")
  ;;      (mu4e-drafts-folder "/olavlp-ntnu/Kladd")
  ;;      (mu4e-trash-folder "/olavlp-ntnu/Slettede elementer")
  ;;      (mu4e-compose-signature
  ;;        (concat
  ;;          "Best regards,\n"
  ;;          "Olav Pedersen\n"
  ;;          "olavlp@stud.ntnu.no\n"))
  ;;      (user-mail-address "olavlp@stud.ntnu.no")
  ;;      (smtpmail-auth-credentials "/home/olav/.config/mu4e/mbsyncpass-olavlp-ntnu.gpg")
  ;;      (smtpmail-starttls-credentials '(("smtp.office365.com" 587 nil nil)))
  ;;      (smtpmail-default-smtp-server "smtp.office365.com")
  ;;      (smtpmail-smtp-server "smtp.office365.com")
  ;;      (smtpmail-smtp-user "olavlp@ntnu.com")
  ;;      (smtpmail-stream-type starttls)
       ;; (smtpmail-smtp-service 587))

      ;; ("acc3-domain"
      ;;  (mu4e-sent-folder "/acc3-domain/Sent")
      ;;  (mu4e-drafts-folder "/acc3-domain/Drafts")
      ;;  (mu4e-trash-folder "/acc3-domain/Trash")
      ;;  (mu4e-compose-signature
      ;;    (concat
      ;;      "John Boy\n"
      ;;      "acc3@domain.com\n"))
      ;;  (user-mail-address "acc3@domain.com")
      ;;  (smtpmail-default-smtp-server "smtp.domain.com")
      ;;  (smtpmail-smtp-server "smtp.domain.com")
      ;;  (smtpmail-smtp-user "acc3@domain.com")
      ;;  (smtpmail-stream-type starttls)
      ;;  (smtpmail-smtp-service 587))
  ;; ))
  #+END_SRC

*** Theme and Icons settings 
    This helps set the correct icons for mu4e icons.
    
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (use-package mu4e-marker-icons
    :ensure t
    :init (mu4e-marker-icons-mode 1))
#+END_SRC
 
** Programming Languages
*** C 
    Simply sets the correct comment style as "//"
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (add-hook 'c-mode-hook (lambda () (c-toggle-comment-style -1)))
#+END_SRC
 
*** Python
**** Triggering Anaconda mode with python mode 
     Starting anaconda mode when starting python mode
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   ;; (add-hook 'python-mode-hook 'anaconda-mode)
 #+END_SRC
 
*** MATLAB config 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ;; Matlab
  (defun init-matlab ()
    "Initializes my configuration for matlab mode."
    (interactive)
    (setq matlab-indent-function "")
    (setq matlab-shell-command ""))

  (add-hook 'matlab-mode-hook 'init-matlab)
#+END_SRC
   
** Writing Settings  
*** Markdown settings 
**** Pandoc Settings 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (add-hook 'markdown-mode-hook 'pandoc-mode)
 (setq markdown-command "/usr/bin/pandoc")
#+END_SRC
    
**** Turning on automatic newline and autofill
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (add-hook 'markdown-mode-hook '(lambda () (setq fill-column 80)))
 (add-hook 'markdown-mode-hook 'auto-fill-mode)
 (add-hook 'markdown-mode-hook 'turn-on-font-lock)
#+END_SRC
 
*** LaTeX settings 
**** Specifying a build directory 
     
     This function was found [[https://tex.stackexchange.com/questions/111834/auctex-output-directory-copy-pdf-to-working-directory][here]], and describes the way I would like for auctex
     to function. 

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (add-hook 'LaTeX-mode-hook (lambda ()
                  (push 
                    '("Latex_outdir" "%`pdflatex --output-directory=/tmp %(mode)%' %t" 
                  TeX-run-TeX nil (latex-mode doctex-mode) 
                  :help "Run pdflatex with output in /tmp")
                    TeX-command-list)))
#+END_SRC

**** TeX-view function to look in multiple locations 
     
     I created this function to overwrite the current view function as I
     couldn't figure out how to supply an additional path for the file. The
     keybindings are overwritten below in [[keybindings]].
     
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (defun TeX-view-custom ()
    "Start a viewer without confirmation. It will look for the ~main.pdf~
  file in the current directory or it will look for it in the tmp directory.
  The viewer is started either on region or master file, depending on the
  last command issued."
    (interactive)
    (let ((output-file "./main.pdf")
          (output-sub-dir-file "./tmp/main.pdf"))
    (cond ((file-exists-p output-file) (find-file "./main.pdf"))
          ((file-exists-p output-sub-dir-file)  (find-file "./tmp/main.pdf"))
          (t (message "Output file %S does not exist." )output-file))))
#+END_SRC
     
**** Setting the default command to compile main.tex files
     
    When running latex build (, b) by default it will run "main.tex"
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (setq-default TeX-master "main")
#+END_SRC
 
**** Enabling folding of latex headings such as seen in org-mode 
     
    This hides and shows text. The `outline-minor-mode` is used to fold text in
    headings and such. "Folding" in latex allows you to hide the environment types
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (setq latex-enable-folding t)
 (add-hook 'LaTeX-mode-hook 'outline-minor-mode)
#+END_SRC

**** TODO Clean up this section and fiugre out how to specify the folder path latex  
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
       (setq TeX-source-correlate-method 'synctex)
       (setq TeX-source-correlate-mode t)
       (setq TeX-source-correlate-start-server t)
       ;; (setq latex-enable-magic t)
       (setq TeX-PDF-mode t)
       (setq reftex-cite-format 'natbib)
       (setq reftex-index-phrases-case-fold-search t)
#+END_SRC

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (add-hook 'LaTeX-mode-hook (lambda ()
                              (push 
                               '("Make" "latexmk -outdir=/tmp %t" TeX-run-TeX nil t
                                 :help "Make pdf output using latexmk.")
                               TeX-command-list)))
#+END_SRC

   This is a function that will run latex build every time you save, currently
   not active
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (defun run-latex ()
   (interactive)
   (let ((process (TeX-active-process))) (if process (delete-process process)))
   (let ((TeX-save-query nil)) (TeX-save-document ""))
   (TeX-command-menu "latex/build"))
 ;; (add-hook 'LaTeX-mode-hook (lambda () (local-set-key (kbd ":w") #'run-latex)))
#+END_SRC
   
**** PDF-tools as default for LaTeX mode
     
     This is for using the built in pdfviewer in emacs
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
     (setq TeX-view-program-selection '((output-pdf "PDF Tools"))
           TeX-view-program-list '(("PDF Tools" TeX-pdf-tools-sync-view))
           TeX-source-correlate-start-server t)
#+END_SRC
 
** Org Settings 
*** Starting with-eval-after-load 
    
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (with-eval-after-load 'org
#+END_SRC
 
*** ox-beamer
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq org-beamer-frame-level 2)
#+END_SRC
 
*** Org Default Apps
    
    This is used in order to get org-ref and org-pdftools to use pdf-tools to
    open up a pdf link in an org file.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (add-to-list 'org-file-apps '("\\.pdf\\'" . emacs))
#+END_SRC

*** Org-Capture
**** Org Capture Templates Function Start
     The ~org-capture-templates~ idea of where the capture templates are
     accessed by leader keys, such as in emacs. The main categories are:

     - "Life"
     - "Masters"
     - "SkyTrack"
     - "Thesis"
     - "Hobbies"
     - "Recommendation"

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq agenda_masters (concat org_agenda_dir "masters.org"))
  (setq agenda_masters_meetings (concat org_agenda_dir "masters_meetings.org"))
  (setq agenda_skytrack (concat org_agenda_dir "skytrack.org"))
  (setq agenda_life (concat org_agenda_dir "life.org"))
  (setq agenda_thesis (concat org_agenda_dir "thesis.org"))
  (setq agenda_recommendations (concat org_agenda_dir "recommendations.org"))
  (setq agenda_hobbies (concat org_agenda_dir "hobbies.org"))
  (setq org-capture-templates '(
#+END_SRC

**** General Info about the org-capture templates
     
      <<general-captures-description>>
     There are primarily only 4 different templates defined here. They are
     hidden behind different categories based on time prompts. This is a work in
     progress, and I simply want to figure out if this is a good method of
     working or not. At this moment all of the tasks just create TODO tasks
     These templates store ~org-capture~ templates under 3 main categories.
     
     All the files, besides ~recommendations~, are organized by ~datetime~ since
     there are not special categories associated with these tasks (at the
     moment). However, the use of tags, as I have used in Kanban style
     organizer. These are added such that kaban style can be used later if
     desired. 
     
     All of the options for organizing these things are organized via:
       - "important"
       - "chill"
       - "soon"
       - "later"
     
     *The four categories of tasks are:*
       - "r" Regular Prompts: No time prompts for schedule or deadline
       - "s" Schedule tasks: For task you want to schedule, but do not have a deadline
       - "d" Deadline tasks: For task with a Deadline you haven't scheduled
       - "b" Both time prompts tasks: when you want to schedule and deadline.
     *The main functions are:*
       - "t" Create a simple task (with no frills besides created timestamp)
       - "i" Create a task with and write some additional notes
       - "l" Create a task with a link and info to a file location
       - "s" Create a task with a link, info, and code snippet based on kill ring

**** Masters General Project Templates
     *Special commands*
       - "mm" is for taking meeting notes and keeping overview by the @meeting tag. 

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("m" "Masters General")

  ("mm" "Meeting Notes" entry
  (file+olp+datetree agenda_masters_meetings)
   "* %? \t :meeting: \n CREATED: %U")

  ;; No Date Prompts
  ("mr" "Regular Tasks")
  ("mrt" "Create task" entry
  (file+olp+datetree agenda_masters)
   "* TODO %? \t%^g \n CREATED: %U")
  ("mri" "Create task with info" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n %?")
  ("mrl" "Create task with link" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("mrc"  "Create task with link and snippet" entry 
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("ms" "Schedule Tasks")
  ("mst" "Schedule a task" entry
  (file+olp+datetree agenda_masters)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t")
  ("msi" "Schedule a task with info" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %?")
  ("msl" "Schedule a task with link" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("msc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("md" "Deadline Tasks")
  ("mdt" "Schedule a task" entry
  (file+olp+datetree agenda_masters)
   "* TODO %? \t%^g \n CREATED: %U \n DEADLINE: %^t")
  ("mdi" "Schedule a task with info" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %?")
  ("mdl" "Schedule a task with link" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %a \n %?")
  ("mdc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n DEADLINE:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ;; Deadline and Schedule Prompted 
  ("mb" "Deadline and Schedule tasks")
  ("mbt" "Schedule a task" entry
  (file+olp+datetree agenda_masters)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t")
  ("mbi" "Schedule a task with info" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %?")
  ("mbl" "Schedule a task with link" entry
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %a \n %?")
  ("mbs"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_masters)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n DEADLINE: %^t \n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")
#+END_SRC

**** SkyTrack Project Templates
     
     These are identical to [[general-captures-description]], but for different files.

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("s" "SkyTrack")

  ;; No Date Prompts
  ("sr" "Regular Prompts")
  ("srt" "Create task" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %? \t%^g \n CREATED: %U")
  ("sri" "Create task with info" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n %?")
  ("srl" "Create task with link" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("src"  "Create task with link and snippet" entry 
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("ss" "Schedule Tasks")
  ("sst" "Schedule a task" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t")
  ("ssi" "Schedule a task with info" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %?")
  ("ssl" "Schedule a task with link" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("ssc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("sd" "Deadline Tasks")
  ("sdt" "Schedule a task" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %? \t%^g \n CREATED: %U \n DEADLINE: %^t")
  ("sdi" "Schedule a task with info" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %?")
  ("sdl" "Schedule a task with link" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %a \n %?")
  ("sdc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n DEADLINE:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ;; Deadline and Schedule Prompted 
  ("sb" "Deadline and Schedule tasks")
  ("sbt" "Schedule a task" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t DEADLINE: %^t \n")
  ("sbi" "Schedule a task with info" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %?")
  ("sbl" "Schedule a task with link" entry
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %a \n %?")
  ("sbs"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_skytrack)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n DEADLINE: %^t \n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")
#+END_SRC

**** Thesis Project Templates
     
     These are identical to [[masters-captures-description]], but for different files.

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("t" "Thesis")

  ;; No Date Prompts
  ("tr" "Regular Prompts")
  ("trt" "Create task" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %? \t%^g \n CREATED: %U")
  ("tri" "Create task with info" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n %?")
  ("trl" "Create task with link" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("trc"  "Create task with link and snippet" entry 
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("ts" "Schedule Tasks")
  ("tst" "Schedule a task" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t")
  ("tsi" "Schedule a task with info" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %?")
  ("tsl" "Schedule a task with link" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("tsc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("td" "Deadline Tasks")
  ("tdt" "Schedule a task" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %? \t%^g \n CREATED: %U \n DEADLINE: %^t")
  ("tdi" "Schedule a task with info" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %?")
  ("tdl" "Schedule a task with link" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %a \n %?")
  ("tdc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n DEADLINE:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ;; Deadline and Schedule Prompted 
  ("tb" "Deadline and Schedule tasks")
  ("tbt" "Schedule a task" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t")
  ("tbi" "Schedule a task with info" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %?")
  ("tbl" "Schedule a task with link" entry
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %a \n %?")
  ("tbs"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_thesis)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n DEADLINE: %^t \n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")
#+END_SRC

**** Life Templates

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("l" "Life")

  ;; No Date Prompts
  ("lr" "Regular Prompts")
  ("lrt" "Create task" entry
  (file+olp+datetree agenda_life)
   "* TODO %? \t%^g \n CREATED: %U")
  ("lri" "Create task with info" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n %?")
  ("lrl" "Create task with link" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g\n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("lrc"  "Create task with link and snippet" entry 
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("ls" "Schedule Tasks")
  ("lst" "Schedule a task" entry
  (file+olp+datetree agenda_life)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t")
  ("lsi" "Schedule a task with info" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %?")
  ("lsl" "Schedule a task with link" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("lsc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("ld" "Deadline Tasks")
  ("ldt" "Schedule a task" entry
  (file+olp+datetree agenda_life)
   "* TODO %? \t%^g \n CREATED: %U \n DEADLINE: %^t")
  ("ldi" "Schedule a task with info" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %?")
  ("ldl" "Schedule a task with link" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %a \n %?")
  ("ldc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n DEADLINE:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ;; Deadline and Schedule Prompted 
  ("lb" "Deadline and Schedule tasks")
  ("lbt" "Schedule a task" entry
  (file+olp+datetree agenda_life)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t")
  ("lbi" "Schedule a task with info" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %?")
  ("lbl" "Schedule a task with link" entry
  (file+olp+datetree agenda_life)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %a \n %?")
  ("lbs"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_life)
  "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n DEADLINE: %^t \n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")
#+END_SRC

**** Hobbies Templates
     
     The life tasks are organized by ~datetime~ since there are not special
     categories associated with these tasks (at the moment). However, the use of
     priorities, as I have used in Kanban style organizer. 

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("h" "Hobbies")

  ;; No Date Prompts
  ("hr" "Regular Prompts")
  ("hrt" "Create task" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %? \t%^g \n CREATED: %U")
  ("hri" "Create task with info" entry
  (fihe+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n %?")
  ("hrl" "Create task with link" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g\n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("hrc"  "Create task with link and snippet" entry 
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("hs" "Schedule Tasks")
  ("hst" "Schedule a task" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t")
  ("hsi" "Schedule a task with info" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %?")
  ("hsl" "Schedule a task with link" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n %a \n %?")
  ("hsc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ("hd" "Deadline Tasks")
  ("hdt" "Schedule a task" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %? \t%^g \n CREATED: %U \n DEADLINE: %^t")
  ("hdi" "Schedule a task with info" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %?")
  ("hdl" "Schedule a task with link" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n DEADLINE: %^t \n %a \n %?")
  ("hdc"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED:%U\n DEADLINE:%^t\n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")

  ;; Deadline and Schedule Prompted 
  ("hb" "Deadline and Schedule tasks")
  ("hbt" "Schedule a task" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %? \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t")
  ("hbi" "Schedule a task with info" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %?")
  ("hbl" "Schedule a task with link" entry
  (file+olp+datetree agenda_hobbies)
   "* TODO %^{Task} \t%^g \n CREATED: %U \n SCHEDULED: %^t \n DEADLINE: %^t \n %a \n %?")
  ("hbs"  "Scheduled task with link and snippet" entry 
  (file+olp+datetree agenda_hobbies)
  "* TODO %^{Task} \t%^g \n CREATED:%U\n SCHEDULED:%^t\n DEADLINE: %^t \n %a\n %?\n#+BEGIN_SRC %^{Language}\n%c\n#+END_SRC")
#+END_SRC

**** Recommendations Templates
     
     This recommendations is sorted by headings defined below. If a need arises
     for another category just create a new version of the following template!

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ("r" "Recommendations")

  ;; No Date Prompts
  ("rf" "Food" entry
  (file+headline agenda_recommendations "Food")
   "* %^{Task} \n CREATED: %U \n %?")
  ("rm" "Movies" entry
  (file+headline agenda_recommendations "Movies")
   "* %^{Task} \n CREATED: %U \n %?")
  ("rb" "Books" entry
  (file+headline agenda_recommendations "Books")
   "* %^{Task} \n CREATED: %U \n %?")
  ("rs" "Shows" entry
  (file+headline agenda_recommendations "Shows")
   "* %^{Task} \n CREATED: %U \n %?")
#+END_SRC

**** Finishing template function
  #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  ))
  #+END_SRC

*** Org-Agenda
    This sets the time it takes for to show warnings on deadlines for org-agenda
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq org-deadline-warnings-days 7)
  (setq org-agenda-span (quote fortnight))
  ;; (setq org-agenda-skip-scheduled-if-deadline-is-shown t)
  ;; (setq org-agenda-skip-deadline-prewarning-if-scheduled (quote pre-scheduled))
  ;; (setq org-agenda-todo-ignore-deadlines (quote all))
  ;; (setq org-agenda-todo-ignore-scheduled (quote all))
#+END_SRC
    
*** Defining the keywords agenda terms and colors
    Setting custom colors for the different keywords. I need to figure out how
    to use the ~NEXT~ keyword.
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (setq org-todo-keywords '((sequence "TODO(t)" "PROGRESS(p)" "WAITING(w)" "|" "DONE(d)" "CANCEL(c)")))
 (setq org-todo-keyword-faces '(
      ("TODO" . (:foreground "#dabe72" :weight bold))
      ("PROGRESS" . (:foreground "#5e7e9b" :weight bold))
      ("WAITING" . (:foreground "#bf6c68" :weight bold))
      ("DONE" . (:foreground "#aabf7f" :weight bold))
      ("CANCEL" . (:foreground "#5a7273" :weight bold))))
#+END_SRC
    
*** Setting the color of tags
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (setq org-tags-faces '(
       ("important" . (:foreground "#d65f2f"))
       ("soon" . (:foreground "#bf6c68"))
 ))
#+END_SRC
    
*** Colors for Deadlines in Agenda 
    
    This is [[www.reddit.com/r/emacs/comments/5cfij7/orgmode_custom_deadline_color/][explains]] the details of how this function works, but for the most
    part this variable sets the face for deadline tasks. The values from 0 to 1
    determine how close the deadline is. ~1~ is the most intense deadline
    warning, and ~0~ is the lowest deadline setting. The setting that dictates
    which color to show is set in ~org-deadline-warning-days~.
    
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
 (setq org-agenda-deadline-faces '(
       (1.0 . (:foreground "#bf6c68"))
       (0.5 . (:foreground "#d65f2f"))
       (0.0 . (:foreground "#dabe72"))))
#+END_SRC
    
*** Turning on automatic newline and line wrapping
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq org-startup-truncated nil)
  (add-hook 'org-mode-hook '(lambda () (setq fill-column 80)))
  (add-hook 'org-mode-hook 'auto-fill-mode)
  (add-hook 'org-mode-hook 'turn-on-font-lock)
#+END_SRC
    
*** Settings for bullets and ellipsis
    Org-mode develop uses org-superstar-mode for bullets
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq org-ellipsis "⤵")
  (add-hook 'org-mode-hook 'org-superstar-mode)
  (setq org-hide-leading-stars nil)
  (setq org-superstar-leading-bullet ?\s)
#+END_SRC
    
*** Checklist completion changes TODO to DONE 
     Switch header TODO state to DONE when all checkboxes are ticked, to TODO
     otherwise 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(defun my/org-checkbox-todo ()
  (let ((todo-state (org-get-todo-state)) beg end)
    (unless (not todo-state)
      (save-excursion
        (org-back-to-heading t)
        (setq beg (point))
        (end-of-line)
        (setq end (point))
        (goto-char beg)
        (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]"
                               end t)
            (if (match-end 1)
                (if (equal (match-string 1) "100%")
                    (unless (string-equal todo-state "DONE")
                      (org-todo 'done))
                  (unless (string-equal todo-state "TODO")
                    (org-todo 'todo)))
              (if (and (> (match-end 2) (match-beginning 2))
                       (equal (match-string 2) (match-string 3)))
                  (unless (string-equal todo-state "DONE")
                    (org-todo 'done))
                (unless (string-equal todo-state "TODO")
                  (org-todo 'todo)))))))))

(add-hook 'org-checkbox-statistics-hook 'my/org-checkbox-todo)
#+END_SRC
    
*** Org-babel
    This is to enable compilation for different source code block environments
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(org-babel-do-load-languages
  'org-babel-load-languages
  '((python . t)
    (R . t)
   ))
#+END_SRC   
 
*** Org-pdftools and Org-noter
    Using different packages
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (use-package org-pdftools
    :hook (org-mode . org-pdftools-setup-link))

  (use-package org-noter
    :after (:any org pdf-view)
    :config
    (setq org-noter-always-create-frame nil
          ;; org-noter-notes-window-location 'other-frame
          org-noter-hide-other nil
          org-noter-insert-note-no-questions t
          org-noter-separate-notes-from-heading t
          org-noter-notes-search-path (list org_roam_dir)
          org-noter-auto-save-last-location t))

  (use-package org-noter-pdftools
    :after org-noter
    :config
    (with-eval-after-load 'pdf-annot
      (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+END_SRC
    
*** Org-Roam
   This sets the org roam directory and starts org-roam on startup.
   If you want to add more good org-roam config information checkout the
   following link: https://rgoswami.me/posts/org-note-workflow/#org-noter 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (add-hook 'after-init-hook 'org-roam-mode)
   (setq org-link-file-path-type 'adaptive)
 #+END_SRC
 
*** Org-Roam-Server
   These are the settings for setting up org-roam-server in order to visualize
   all the work being done in org-roam
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(use-package org-roam-server
  :ensure t
  :config
  (setq org-roam-server-host "127.0.0.1"
        org-roam-server-port 8080
        org-roam-server-authenticate nil
        org-roam-server-export-inline-images t
        org-roam-server-serve-files nil
        org-roam-server-served-file-extensions '("pdf" "mp4" "ogv")
        org-roam-server-network-poll t
        org-roam-server-network-arrows nil
        org-roam-server-network-label-truncate t
        org-roam-server-network-label-truncate-length 60
        org-roam-server-network-label-wrap-length 20))
 #+END_SRC
 
   This function opens up a browser to the location of the org-roam-server. 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (defun open-roam-server-pages () (interactive) (browse-url "http://127.0.0.1:8080")
   (funcall 'org-roam-server-mode))
 #+END_SRC
 
*** Org-Ref
    This section was copied from Ian Jones, as much of the settings above, but
this section was originally found at: https://rgoswami.me/posts/org-note-workflow/#org-ref 
 - ~org-ref-get-pdf-filename-function~ will use helm-bibtex settings to find the pdf
 - ~org-ref-notes-function~, currently this will expect one file per pdf and to
   use ~org-roam~ rather than ref or bibtex systems.
   
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (use-package org-ref
       :config
       (setq
        org-ref-open-pdf-filename 'org-pdftools-open
        org-ref-completion-library 'org-ref-ivy-cite
        org-ref-get-pdf-filename-function 'org-ref-get-pdf-filename-helm-bibtex
        org-ref-note-title-format "* TODO %y - %t\n :PROPERTIES:\n  :Custom_ID: %k\n  :NOTER_DOCUMENT: %F\n :ROAM_KEY: cite:%k\n  :AUTHOR: %9a\n  :JOURNAL: %j\n  :YEAR: %y\n  :VOLUME: %v\n  :PAGES: %p\n  :DOI: %D\n  :URL: %U\n :END:\n\n"
        org-ref-notes-function 'orb-edit-notes
       ))
    #+END_SRC

**** Cheatsheet for using org-ref fields 

     These are format specifiers for org-ref. The are *not* the same as the keys
     in the .bib files.
     
#+BEGIN_EXAMPLE
In the format, the following percent escapes will be expanded.
%l The BibTeX label of the citation.
%a List of author names, see also \`reftex-cite-punctuation&rsquo;.
%2a Like %a, but abbreviate more than 2 authors like Jones et al.
%A First author name only.
%e Works like %a, but on list of editor names. (%2e and %E work as well)
It is also possible to access all other BibTeX database fields:
%b booktitle %c chapter %d edition %h howpublished
%i institution %j journal %k key %m month
%n number %o organization %p pages %P first page
%r address %s school %u publisher %t title
%v volume %y year
%B booktitle, abbreviated %T title, abbreviated
%U url
%D doi
%S series %N note
%f pdf filename
%F absolute pdf filename
Usually, only %l is needed. The other stuff is mainly for the echo area
display, and for (setq reftex-comment-citations t).
%< as a special operator kills punctuation and space around it after the
string has been formatted.
A pair of square brackets indicates an optional argument, and RefTeX
will prompt for the values of these arguments.
#+END_EXAMPLE
    
*** Org-Roam-Bibtex
    
   This sets the org roam directory and starts org-roam on startup.
   A very minimal config can be found at [[github.com/nobiot/Zero-to-Emacs-and-Org-roam/blob/d8cf2c065034f04c205a05c83009ce5e4acd4816/.emacs#L116-L151][nobiot's]] website for reference.
   More detailed information here in this orb [[org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/29][Discourse]] website.

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (use-package org-roam-bibtex
        :after org-roam
        :hook (org-roam-mode . org-roam-bibtex-mode))
#+end_src

 This is an org-roam-bibtex template taken from
 https://www.philipperambert.com/Installing-Org-Roam-Bibtex-In-Spacemacs 
 More suggestions came from [[www.ianjones.us/org-roam-bibtex][Ian Jones website.]]

#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
(setq orb-preformat-keywords
       '("citekey" "title" "url" "author-or-editor" "keywords" "file")
      ;; '(("citekey" . "=key=") "title" "url" "author-or-editor" "keywords" "file")
      orb-process-file-keyword t
      orb-process-file-field t
      orb-file-field-extensions '("pdf"))

(setq orb-templates
       '(("r" "ref" plain (function org-roam-capture--get-point)
""
:file-name "${citekey}"
:head "#+TITLE: ${citekey}: ${title}\n#+ROAM_KEY: ${ref}

 - tags ::
 - keywords :: ${keywords}

,* ${title}
:PROPERTIES:
:Custom_ID: ${citekey}
:URL: ${url}
:AUTHOR: ${author-or-editor}
:NOTER_DOCUMENT: ${file}
:NOTER_PAGE:
:END:")))

#+END_SRC

*** Ox-hugo
    This is to enable compilation for different source code block environments
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (use-package ox-hugo
    :ensure t
    :after ox)
#+END_SRC   

*** Autopairing

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      ;; For autopairing in org-mode
      (with-eval-after-load 'org
        ;; (modify-syntax-entry ?/ "(/" org-mode-syntax-table)
        ;; (modify-syntax-entry ?= "(=" org-mode-syntax-table)
        (modify-syntax-entry ?\$ "($" org-mode-syntax-table)
        (modify-syntax-entry ?\( "()" org-mode-syntax-table)
        (modify-syntax-entry ?\[ "(]" org-mode-syntax-table)
        (add-hook 'org-mode-hook 'electric-pair-mode))
 #+END_SRC
 
*** Toggles LaTeX fragment 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (defvar org-latex-fragment-last nil
      "Holds last fragment/environment you were on.")

      (defun org-latex-fragment-toggle ()
        "Toggle a latex fragment image "
        (and (eq 'org-mode major-mode)
            (let* ((el (org-element-context))
                    (el-type (car el)))
              (cond
                ;; were on a fragment and now on a new fragment
                ((and
                  ;; fragment we were on
                  org-latex-fragment-last
                  ;; and are on a fragment now
                  (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type))
                  ;; but not on the last one this is a little tricky. as you edit the
                  ;; fragment, it is not equal to the last one. We use the begin
                  ;; property which is less likely to change for the comparison.
                  (not (= (org-element-property :begin el)
                          (org-element-property :begin org-latex-fragment-last))))
                ;; go back to last one and put image back
                (save-excursion
                  (goto-char (org-element-property :begin org-latex-fragment-last))
                  (org-preview-latex-fragment))
                ;; now remove current image
                (goto-char (org-element-property :begin el))
                (let ((ov (loop for ov in org-latex-fragment-image-overlays
                                if
                                (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                return ov)))
                  (when ov
                    (delete-overlay ov)))
                ;; and save new fragment
                (setq org-latex-fragment-last el))

                ;; were on a fragment and now are not on a fragment
                ((and
                  ;; not on a fragment now
                  (not (or
                        (eq 'latex-fragment el-type)
                        (eq 'latex-environment el-type)))
                  ;; but we were on one
                  org-latex-fragment-last)
                ;; put image back on
                (save-excursion
                  (goto-char (org-element-property :begin org-latex-fragment-last))
                  (org-preview-latex-fragment))
                ;; unset last fragment
                (setq org-latex-fragment-last nil))

                ;; were not on a fragment, and now are
                ((and
                  ;; we were not one one
                  (not org-latex-fragment-last)
                  ;; but now we are
                  (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
                (goto-char (org-element-property :begin el))
                ;; remove image
                (let ((ov (loop for ov in org-latex-fragment-image-overlays
                                if
                                (and
                                  (<= (overlay-start ov) (point))
                                  (>= (overlay-end ov) (point)))
                                return ov)))
                  (when ov
                    (delete-overlay ov)))
                (setq org-latex-fragment-last el))))))


      (add-hook 'post-command-hook 'org-latex-fragment-toggle)
 #+END_SRC

*** Ending with-eval-after-load 
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  )
#+END_SRC
 
** Bibtex Settings  
   These are the following custom settings to make ~helm-bibtex~ easier to work
   together with ~natbib~. Especially when working on the masters. The default
   is set to "cite".
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq bibtex-completion-cite-default-command "citep")
 #+END_SRC
 
   Since I rarely ever use optional pre- or post-arguments the following
   disables the default prompting. 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
  (setq bibtex-completion-cite-prompt-for-optional-arguments nil)
 #+END_SRC
 
    This defines the custom template that bibtex uses. 
    [[org-roam.discourse.group/t/need-help-getting-noter-pdfs-and-org-roam-bibtex-to-work/794/12][Appearently]] in this blog post they say that this part is redundant if
    ~org-roam-bibtex-mode~ is activate.
    
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (setq
    bibtex-completion-pdf-field "file"
    ;; bibtex-completion-notes-template-multiple-files
    ;; (concat
    ;;  "#+TITLE: ${title}\n"
    ;;  "#+ROAM_KEY: cite:${=key=}\n"
    ;;  "* TODO Notes\n"
    ;;  ":PROPERTIES:\n"
    ;;  ":Custom_ID: ${=key=}\n"
    ;;  ":NOTER_DOCUMENT: %(orb-process-file-field \"${=key=}\")\n"
    ;;  ":AUTHOR: ${author-abbrev}\n"
    ;;  ":JOURNAL: ${journaltitle}\n"
    ;;  ":DATE: ${date}\n"
    ;;  ":YEAR: ${year}\n"
    ;;  ":DOI: ${doi}\n"
    ;;  ":URL: ${url}\n"
    ;;  ":END:\n\n"
    ;;  )
    )
 #+END_SRC
   
** Theme Stuff
*** Setting cursor and spaceline theme
   
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      (use-package ewal-evil-cursors
        :after (ewal-spacemacs-themes)
        :config (ewal-evil-cursors-get-colors
                 :apply t :spaceline t))
      ;; (use-package spaceline
      ;;   :after (ewal-evil-cursors winum)
      ;;   :init (setq powerline-default-separator nil)
      ;;   :config (spaceline-spacemacs-theme))
      ;; (use-package spaceline-all-the-icons
      ;;   :after spaceline
      ;;   :config (spaceline-all-the-icons-theme))
 #+END_SRC
 
*** Alternate Xresources Theme 
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
      ;; Xresources (that is functional)
      ;; (load-theme 'xresources t)
 #+END_SRC
 
*** Disabling highlight for comments

 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   (global-hl-line-mode -1)
   (spacemacs/toggle-highlight-current-line-globally-off)
 #+END_SRC

*** Changing the powerline scaling
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
   ;; This can be tested to see if there are problems with offset powerline
   ;; (setq spaceline-responsive nil)
  (setq spaceline-all-the-icons-separator-scale 1.8)
#+END_SRC
 
** Keybindings
   <<keybindings>>
   Non-specific keybindings are defined below 
   
#+BEGIN_SRC emacs-lisp :tangle spacemacs.el
    ;; Emacs System functions
    (spacemacs/set-leader-keys "feo" 'open-org-config-file)
    (spacemacs/set-leader-keys "fen" 'open-system-notes-file)
    (spacemacs/set-leader-keys "hh" 'describe-thing-in-popup)
    (spacemacs/set-leader-keys "jg" 'xref-find-definitions)
    (spacemacs/set-leader-keys "jp" 'xref-pop-marker-stack)
    ;; Markup functions
    (with-eval-after-load 'latex
      (spacemacs/set-leader-keys-for-major-mode 'latex-mode "v" 'TeX-view-custom)
      (spacemacs/set-leader-keys-for-major-mode 'latex-mode "hh" 'helm-bibtex)
    )
    ;; Programming functions
    (spacemacs/set-leader-keys-for-major-mode 'python-mode "Gh" 'lsp-ui-doc-show)
    ;; Org functions
    (spacemacs/set-leader-keys "aors" 'org-roam-server-mode)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "rs" 'org-roam-server-mode)
    (spacemacs/set-leader-keys "aorw" 'open-roam-server-pages)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "rw" 'open-roam-server-pages)
    (spacemacs/set-leader-keys "aorh" 'helm-bibtex)
    (spacemacs/set-leader-keys-for-major-mode 'org-mode "rh" 'helm-bibtex)
#+END_SRC

** Finishing user-config
 #+BEGIN_SRC emacs-lisp :tangle spacemacs.el
)
 #+END_SRC
 
 
* Local Variables
# Local Variables:
# eval: (add-hook 'after-save-hook (lambda ()(org-babel-tangle)) nil t)
# End:

